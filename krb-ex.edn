[ ] figure out best order...
[ ] add template to top
[ ] add stuff from gokuin the wild
[ ] start editing once have best git strategy
[ ] explore froms relevance to universal... (rgomez)
    - can also use as repeatable template (like open bartender search xxx and push enter...):shortcut:shortcut
{
;;? PROFILES

:profiles {:Goku-test {:default true
                        :sim 50
                        :delay 500
                        :alone 1000
                        :held 500}
            :Goku {:sim 100}
    }
:profiles ;; from mmrocska's karabiner
 {:MrStark {:default true
         :sim     50
         :delay   200
         :alone   300
         :held    300}}

;;? DEVICES
 :devices {:hhkb-bt [{:vendor_id 1278 :product_id 51966}]
           :hhkb [{:vendor_id 2131 :product_id 256}]}

 :devices { ;; from mmrocska's karabiner
				; :macbook-internal [{:product_id 631 :vendor_id 1452}]
				:uhk-keyboard [{:product_id 24866 :vendor_id 7504}]
                :dell-keyboard [{:product_id 8195 :vendor_id 16700}]
			}

;;? APPLICATIONS
 :applications {:chrome ["^com\\.google\\.Chrome$"]
                :chrome-canary [ "^com\\.google\\.Chrome\\.canary$"]
                :chromes ["^com\\.google\\.Chrome$" "^com\\.google\\.Chrome\\.canary$"]}

:applications { ;; from mmrocska's karabiner
                ; you can find these com.* package names using Karabiner Viewer tool installed by default with Karabiner
                :vs-code                       ["^com\\.microsoft\\.VSCode$"]
                :vim-mode-disabled-application ["^com\\.apple\\.Terminal$",
                                                "^com\\.googlecode\\.iterm2$",
                                                "^com\\.microsoft\\.VSCode$",
                                                "^com\\.jetbrains\\.intellij$",
                                                "^com\\.jetbrains\\.pycharm$",
                                                "^me\\.lukehaas\\.runjs",
                                                "^org\\.vim\\.",
                                                ]
                :Chromes                       ["^com\\.google\\.Chrome$", "^org\\.chromium\\.Chromium$", "^com\\.google\\.Chrome\\.canary$", "^com\\.brave\\.Browser"]
                :Terminals                     ["^com\\.apple\\.Terminal$", "^com\\.googlecode\\.iterm2$", "^io\\.alacritty$"]
                :PyCharm                       ["^com\\.jetbrains\\.pycharm$"]
                :Notion                       ["^notion\\.id$"]
                :Finder                       ["^com\\.apple\\.finder$"]
               }
:applications { ;; from alvaro-prieto
		:Chromes  [
			"^com\\.google\\.Chrome$", "^org\\.chromium\\.Chromium$", "^com\\.google\\.Chrome\\.canary$"
		]
		:Firefoxes  [
			"^org\\.mozilla\\.firefox$"
			"^org\\.mozilla\\.firefoxdeveloperedition$"
		]
		:Terminals  [
			"^com\\.apple\\.Terminal$"
		]
		:Finder  [
			"^com\\.apple\\.finder$"
		]
		:Debuggers  [
			"^org\\.mozilla\\.firefox$"
			"^org\\.mozilla\\.firefoxdeveloperedition$"
			"^com\\.google\\.Chrome$"
			"^org\\.chromium\\.Chromium$"
			"^com\\.google\\.Chrome\\.canary$"
			"^com\\.apple\\.Safari$"
			"^com\\.microsoft\\.VSCode$"
		]
		:Browsers  [
			"^org\\.mozilla\\.firefox$"
			"^org\\.mozilla\\.firefoxdeveloperedition$"
			"^com\\.google\\.Chrome$"
			"^org\\.chromium\\.Chromium$"
			"^com\\.google\\.Chrome\\.canary$"
			"^com\\.apple\\.Safari$"
		]
        :Design [
            "^com\\.adobe\\.Adobe-Animate-2020\\.application$"
            "^com\\.adobe\\.Photoshop$"
            "^com\\.adobe\\.illustrator$"
        ]
        :Animate [
            "^com\\.adobe\\.Adobe-Animate-2020\\.application$"
        ]

	}
:applications { ;; from MISC
    :vim-mode-disabled-application ["^com\\.apple\\.Terminal$",
                                                "^com\\.googlecode\\.iterm2$",
                                                "^co\\.zeit\\.hyperterm$",
                                                "^co\\.zeit\\.hyper$",
                                                "^io\\.alacritty$",
                                                "^net\\.kovidgoyal\\.kitty$",
                                                "^org\\.vim\\.",
                                                "^com\\.qvacua\\.VimR$"
        ]
    }


;;? INPUT SOURCES
 :input-sources {:squirrel {:input_mode_id "com.googlecode.rimeime.inputmethod.Squirrel"
                            :input_source_id "com.googlecode.rimeime.inputmethod.Squirrel.Rime"
                            :language "zh-Hans"}
                 :us {:input_mode_id ""
                      :input_source_id "com.apple.keylayout.US"
                      :language "en"}}


;;? TEMPLATES
:templates { ;;= ........from... 2024-11-10 not ure
	:set_letterToFind_var "osascript -e 'tell application \"Keyboard Maestro Engine\" to setvariable \"letterToFind\" to \"%s\"'"
	:set_last_action_var "osascript -e 'tell application \"Keyboard Maestro Engine\" to setvariable \"last_action\" to \"%s\"'"
			:show        "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
		:toggle      "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
		:type        "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"


 :templates {:launch "osascript -e 'tell application \"Alfred 3\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"}
 ;; define alias for modifers
:templates { ;;= ..................................................................................................................... aliases for shell commands including osascript (execute Applescript file), and afplay (plays sound file)
		:run "%s"
		:open "open \"%s\"" ; open file
		:wait "sleep 250" ; pause 250 ms
		:shortcut "osascript -e 'tell application \"Shortcuts Events\" to run the shortcut named \"%s\"'"
		:km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
		:btt "osascript -e 'tell application \"BetterTouchTool\" to  trigger_named \"%s\"'"
		:ray "open \"raycast://extensions/raycast/%s\""	
templates { ;; from mmrocska's karabiner
             :alfred "osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\" with argument \"%s\"'"
             :hs "open -g hammerspoon://%s"
             :km "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
             :btt "osascript -e 'tell application \"BetterTouchTool\" to trigger_named \"%s\"'"
             :set_letterToFind_var "osascript -e 'tell application \"Keyboard Maestro Engine\" to setvariable \"letterToFind\" to \"%s\"'"
             :set_last_action_var "osascript -e 'tell application \"Keyboard Maestro Engine\" to setvariable \"last_action\" to \"%s\"'"
             :open "open \"%s\""
            }
:templates { ;; from alvaro-prieto
		:launch      "osascript -e 'tell application \"Alfred 4\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"
		:alf         "open /Applications/Alfred\\ 4.app && osascript -e 'tell application \"Alfred 4\" to run trigger \"%s\" in workflow \"%s\"'"
		:km          "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
		:kb-maestro  "osascript -e 'tell application \"Keyboard Maestro Engine\" to do script \"%s\"'"
		:open        "open \"%s\""
		:show        "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'\n"
		:toggle      "osascript -e 'set appName to \"%s\"\nset startIt to false\ntell application \"System Events\"\n  if not (exists process appName) then\n    set startIt to true\n  else if frontmost of process appName then\n    set visible of process appName to false\n  else\n    set frontmost of process appName to true\n  end if\nend tell\nif startIt then\n  tell application appName to activate\nend if'"
		:type        "osascript -e 'tell application \"System Events\" to keystroke \"%s\" as text'"
	}
:templates { ;; from 
    :echo "echo \"%s\""
    :open "open \"%s\""
    :open-app "open -a \"%s\""
 :templates ;; from rgomexcasa
  {:open-app         "osascript -e 'tell application \"%s\" to activate'"
             :type             "/opt/homebrew/bin/skhd -t \"%s\""
             :paste            "$HOME/.dotfiles/bin/sdot mac paste_text \"%s\""
             :paste-and-return "$HOME/.dotfiles/bin/sdot mac paste_text \"%s\" --returning"
             :wait_seconds     "osascript -e 'delay %s'"}

;;? MODIFIERS
 ;; define alias for modifers
 :modifiers {:11 [:left_command :left_control]
             :111 [:left_command :left_control :left_option]
             :1111 [:left_command :left_control :left_option :left_shift]
             :ccos [:left_command :left_control :left_option :left_shift]
             :11111 [:fn :left_command :left_control :left_option :left_shift]
             :spacebar-modifier {:mandatory [:left_command :left_control] :optional [:left_shift]}
             :fn&lcommand&lcontrol&loption&lshift [:fn :left_command :left_control :left_option :left_shift]}

;;? FROMS
 :froms {:1 {:key :d}
         :2 {:key :d :modi :1}
         :3 {:key :d :modi :left_command}
         :4 {:key :d :modi [:left_command :right_shift]}
         :5 {:key :d :modi {:mandatory [:left_command :right_shift]}}
         :6 {:key :d :modi {:mandatory [:left_command :right_shift]
                            :optional [:caps_lock]}}
         :7 {:ckey :display_brightness_decrement}
         :8 {:ckey :display_brightness_decrement :modi :left_command}
         :9 {:pkey :button4 :modi :left_command}
         :10 {:sim [:a :b] :modi :left_command}
         :11 {:sim [:a :b]
              :simo {:interrupt true
                     :dorder :insensitive}
              :modi :left_command}}

;;? TOS
;; define tos
 ;; use in <to>
 :tos {:macos-defin {:key :d :modifiers [:left_command :left_control]}
       :alf--search-help "osascript -e 'tell application \"Alfred 3\" to run trigger \"helpSearch\" in workflow \"com.tedwise.menubarsearch\" with argument \"\"'"}


;;? LAYERS
:layers

;;? SIMLAYERS
:simlayers

;;? ====================
;;? MAIN
;; main list
 :main
 ;; [<from> <to>] or
 ;; [<from> <to> <conditions>] or
 ;; [<from> <to> <conditions> <other options>]
 ;; <from> can be keywords defined in froms or keycodes without `{:not-from true}`
 ;; <to> can be keywords defined in tos, keycodes without `{:not-to true}`, string (shell script)
 ;; <conditions> can be keywords defined in layers, devices, applications
 ;; <other options> {:other {:parameters {:to_delayed_action_delay_milliseconds 100 :basic.to_if_alone_timeout_milliseconds 500 :basic.to_if_held_down_threshold_milliseconds 250}} }
 [{:des "a to 1" :rules [[:a :1]]} ;; a to 1
  {:des "command a to control 1" :rules [:!Ca :!T1]} ;; command a to control 1
  {:des "my spacebar to control 1" :rules [:my-spacebar :!T1]} ;; my-spacebar to control 1
  {:des "press b to insert 12" :rules [:b [:1 :2]]}  ;; key to key
  {:des "c to example osascript" :rules [:c "osascript -e 'display dialog \"example apple script\"'"]} ;; key to shell script
  {:des "d to 1 then example osascript" :rules [:d [:1 "osascript -e 'display dialog \"example apple script\"'"]]} ;; key to key then shell script
  {:des "simultaneous e f to 3" :rules [[:e :f] :3]} ;; simultaneous key to key
  {:des "g to 4 when variable vi-mode is 1" :rules [:g :4 :vi-mode]} ;; vi-mode is 1
  {:des "h to 5 when variable vi-mode is not 1" :rules [:h :5 :!vi-mode]} ;; vi-mode is 0
  {:des "i to 6 only for device hhkb-bt" :rules [:i :6 :hhkb-bt]} ;; key to key in layer b (in layer a) specific to hhkb-bt device
  {:des "j to 7 on hhkb-bt when variable vi-mode is 1" :rules [:j :7 [:vi-mode :hhkb-bt]]} ;; multiple condition
  {:des "press h insert 8 then set variable some-mode to 0" :rules [:h [:8 {:set ["some-mode" 0]}]]}] ;; h to 8 and set_variable

;;? 👿 CHEATSHEET
;; code won't read cheatsheet section
 ;; ! stand for mandatory
 ;; # stand for optional
 ;; C T O S for left command control optional shift
 ;; F for fn
 ;; need to prefix C T O S F with ! or #
 :cheatsheet {:!Ca "command a" ;; mandatory left_command
              :!Ta "control a" ;; mandatory left_control
              :!Oa "option a"
              :!Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :!CTOa "command control option a"
              :!Cspacebar "command space"
              :!Fa "fn a"
              :##a "keycode a optional any"
              :!!a "mandatory hyper(control command option shift) a "}}

;; C T O S stands for left_command left_control left_option left_shift
;; Q W E R stands for right_command right_control right_option right_shift

;;;; hyper
;; double !! stands for left_command + left_control + left_option + left_shift
;; and  :!!1 left_command + left_control + left_option + left_shift + 1


;; main list ⭐⭐⭐ 
 :main
 ;; [<from> <to>] or
 ;; [<from> <to> <conditions>] or
 ;; [<from> <to> <conditions> <other options>]
 ;; <from> can be keywords defined in froms or keycodes without `{:not-from true}`
 ;; <to> can be keywords defined in tos, keycodes without `{:not-to true}`, string (shell script)
 ;; <conditions> can be keywords defined in layers, devices, applications
 ;; <other options> {:other {:parameters {:to_delayed_action_delay_milliseconds 100 :basic.to_if_alone_timeout_milliseconds 500 :basic.to_if_held_down_threshold_milliseconds 250}} }
 [{:des "a to 1" :rules [[:a :1]]} ;; a to 1
  {:des "command a to control 1" :rules [:!Ca :!T1]} ;; command a to control 1
  {:des "my spacebar to control 1" :rules [:my-spacebar :!T1]} ;; my-spacebar to control 1
  {:des "press b to insert 12" :rules [:b [:1 :2]]}  ;; key to key
  {:des "c to example osascript" :rules [:c "osascript -e 'display dialog \"example apple script\"'"]} ;; key to shell script
  {:des "d to 1 then example osascript" :rules [:d [:1 "osascript -e 'display dialog \"example apple script\"'"]]} ;; key to key then shell script
  {:des "simultaneous e f to 3" :rules [[:e :f] :3]} ;; simultaneous key to key
  {:des "g to 4 when variable vi-mode is 1" :rules [:g :4 :vi-mode]} ;; vi-mode is 1
  {:des "h to 5 when variable vi-mode is not 1" :rules [:h :5 :!vi-mode]} ;; vi-mode is 0
  {:des "i to 6 only for device hhkb-bt" :rules [:i :6 :hhkb-bt]} ;; key to key in layer b (in layer a) specific to hhkb-bt device
  {:des "j to 7 on hhkb-bt when variable vi-mode is 1" :rules [:j :7 [:vi-mode :hhkb-bt]]} ;; multiple condition
  {:des "press h insert 8 then set variable some-mode to 0" :rules [:h [:8 {:set ["some-mode" 0]}]]}] ;; h to 8 and set_variable





;;? XXXXXXXXXXXXXXXXXXX
;;? ========== launchmode [GokuRakuJoudo/resources/configurations/edn/launch_mode.edn at master · yqrashawn/GokuRakuJoudo](https://github.com/yqrashawn/GokuRakuJoudo/blob/master/resources/configurations/edn/launch_mode.edn)
{:templates {:launch "osascript -e 'tell application \"Alfred 3\" to run trigger \"launch%s\" in workflow \"yqrashawn.workflow.launcher\" with argument \"\"'"}
 :profiles {:launch-default-profile {:default true}
            :launch-second-profile {}}
 :simlayers {:launch-mode {:key :w}}
 :main [{:des "launcher mode"
         :rules [[:j [:launch "Alacritty"] :launch-mode]
                 [:k [:launch "Emacs"] :launch-mode]
                 [:l [:launch "Chrome"] :launch-mode]
                 [:m [:launch "Mail"] :launch-mode]
                 [:v [:launch "WeChat"] :launch-mode]
                 [:q [:launch "KE"] :launch-mode]
                 [:9 [:launch "PDFExpert"] :launch-mode]
                 :launch-second-profile
                 [:comma [:launch "Safari"] :launch-mode]
                 [:period [:launch "Paw"] :launch-mode]
                 [:equal_sign [:launch "Textual"] :launch-mode]
                 [:8 [:launch "KEEvents"] :launch-mode]
                 [:j [:launch ""] :launch-mode]
                 [:b [:launch "BearyChat"] :launch-mode]
                 [:t [:launch "TG"] :launch-mode]]}]}